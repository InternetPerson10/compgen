#!/usr/bin/python

'''
Recursively expand imports of compgen, compgen.checkers and files in the current directory so
that it can be used for Polygon.
'''

from __future__ import print_function

from sys import *
import os.path
from os import mkdir
from glob import glob
from black_magic import expand_imports

script_path = os.path.dirname(os.path.realpath(__file__))
compgen_file = os.path.join(script_path, "compgen", "compgen.py")
checkers_file = os.path.join(script_path, "compgen", "checkers.py")

# extract pastable from compgen
def get_contents(file, f):
    if file == compgen_file:
        yield 'if 1:\n'
        found = False
        for line in f.readlines():
            new_found = '@@@@@' in line
            if found:
                line = ' '*4 + line
                ct = len(line) - len(line.lstrip(' '))
                ct -= ct % 4
                yield ' '*(ct // 4) + line[ct:]
                assert not new_found, "There must only be one @@@@@"
            found |= new_found
    elif file == checkers_file:
        yield 'if 1:\n'
        for line in f.readlines():
            if '@@@@@' not in line:
                line = ' '*4 + line
                ct = len(line) - len(line.lstrip(' '))
                ct -= ct % 4
                yield ' '*(ct // 4) + line[ct:]
    else:
        for line in f:
            yield line

copied_files = sorted(glob('*.py'))

def get_name(file):
    if file == compgen_file: return 'compgen'
    if file == checkers_file: return 'compgen.checkers'
    name, ext = os.path.splitext(os.path.basename(file))
    assert ext == '.py'
    return name

expanded, deps = expand_imports(copied_files + [compgen_file, checkers_file], get_contents, get_name)
for file in sorted(expanded):
    if file != checkers_file and checkers_file in deps[file]:
        print('FOUND CHECKER', file)
        expanded[file].append("chk.run('polygon')\n")

polygon_ready = 'polygon_ready'
try:
    mkdir(polygon_ready)
except OSError:
    pass

for file in sorted(copied_files):
    dname, bname = os.path.split(file)
    poly_file = os.path.join(dname, polygon_ready, bname)
    print('CONVERTING', file, 'TO', poly_file)
    with open(poly_file, 'w') as f:
        f.writelines(expanded[file])

print('DONE')
