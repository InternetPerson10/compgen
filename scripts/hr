#!/usr/bin/python2
from __future__ import print_function

from sys import *
import os
import argparse
from os import system, mkdir
from os.path import basename
from glob import glob


examples = '''
Examples:
    {script_name} gen XXX [cmd]    generates output files to folder 'XXX'
    {script_name} genXXX [cmd]     equivalent to 'gen XXXput [cmd]'
    {script_name} test [cmd]       checks a program against existing data in output/
    {script_name} testc [cmd]      similar to 'test', but doesn't print the output of diff
    {script_name} run [cmd]        just runs the program across all files, and prints to stdout
    {script_name} runboth [cmd]    similar to 'run', but also prints the metadata to stdout, not just to stderr

'''.format(script_name=basename(argv[0]))


parser = argparse.ArgumentParser(
        description='run programs against (HackerRank-formatted) test data',
        epilog=examples,
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
parser.add_argument('operation', help='operation name (gen*, test, testc, run, etc.)')
parser.add_argument('command', nargs='*', help='the command used to run the program you wish to run')
parser.add_argument('-c', '--checker', default=None, help='custom checker file to test the solution on')
parser.add_argument('-p', action='store_true', help="whether the checker is a simple checker that doesn't take extra arguments")
pargs = parser.parse_args()

cmd = pargs.operation
args = pargs.command
checker = pargs.checker


basura = '/tmp/basura_delete_later_once_scripts_finish_running_hr'
basura2 = '/tmp/basura_delete_later_once_scripts_finish_running_hr2'

print_to = 'cat > {}'.format

def go_through(cmd, replacement, destination, prints=(stderr,)):
    for targ in prints: print('times are printed as "real user sys"', file=targ)
    for idx, filename in enumerate(sorted(glob('input/input*.txt'))):
        outfilename = filename.replace('input', replacement, 1).replace('input', 'output', 1)
        for targ in prints: print('DOING', outfilename, file=targ)
        system('/usr/bin/time -f "TIME %es %Us %Ss" {} < {} | {}'.format(cmd, filename, destination(outfilename)))
        yield idx, filename, outfilename

def unknown(cmd):
    print("Unrecognized command:", cmd, file=stderr)
    exit(1)


def possibly_extract_code_file(args):
    # try to find some file that looks like some code file
    for ending in ['.py', '.py3', '.java', '.cpp', '.c', '.hs']:
        for arg in args:
            if arg.lower().endswith(ending):
                return arg

    # try to find some file that looks like some solution program
    for special in ['sol', 'ans', 'fast', 'naive', 'semi', 'slow', 'brute', 'tle', 'wa', 're', 'rte', 'ac']:
        for arg in args:
            if special in arg.lower():
                return arg

    # we give up. just return the first one.
    return args[0]

if cmd.startswith('gen'):

    if cmd == 'gen':
        out = args[0]
        args = args[1:]
    else:
        out = cmd[len('gen'):] + 'put'

    print('Generating to folder:', repr(out), file=stderr)

    try:
        mkdir(out)
    except OSError:
        pass

    for idx, filename, outfilename in go_through(' '.join(args), out, print_to):
        pass
elif cmd.startswith('test'):
    fileverb = False
    if cmd not in ('testget', 'testc', 'test'):
        unknown(cmd)

    correct = files = 0
    for idx, filename, outfilename in go_through(' '.join(args), 'output', lambda x: print_to(basura)):

        if checker:
            if cmd == 'testget':
                print('{} custom: '.format(filename), end='', file=stderr)
                stderr.flush()
            ch_cmd = '>&2 python2 {} {} {} {} {}' if pargs.p else '>&2 python2 {} -c {code} -t {idx} {verb} {} {} {} {}'
            status = system(ch_cmd.format(
                    checker,
                    filename, basura, outfilename,
                    '> {}'.format(basura2) if cmd == 'testc' else '',
                    code=possibly_extract_code_file(args),
                    idx=idx,
                    verb='-v' if cmd == 'test' else '',
                ))
        else:
            if cmd == 'test':
                system("diff {} {} | head -n 100".format(basura, outfilename))
            status = system("diff {} {} > {}".format(basura, outfilename, basura2))
        files += 1
        if status == 0:
            correct += 1
        print("correct" if status == 0 else "WRONG!!!!!!!!!", outfilename if cmd == 'testget' else '', file=stderr)

    print("{} out of {} correct".format(correct, files), file=stderr)
    # remove basura and basura2
    for name in basura, basura2:
        try:
            os.remove(name)
        except OSError:
            pass

elif cmd.startswith('run'):
    if cmd == 'run':
        prints = stderr,
    elif cmd == 'runboth':
        prints = stdout, stderr
    else:
        unknown(cmd)

    for idx, filename, outfilename in go_through(' '.join(args), 'input', lambda x: 'cat', prints=prints):
        pass

else:
    unknown(cmd)
